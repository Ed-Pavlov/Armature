name: Build & Test

on:
  workflow_dispatch:
    inputs:
      prerelease_tag:
        description: 'Prerelease tag'
        required: true
        default: 'dev'
      publish_artifacts:
        description: 'Publish artifacts'
        required: true
        default: 'false'
        type: choice
        options:
          - 'true'
          - 'false'

  push:
    branches:
      - main
      - 'feature/**'
      - 'release/**'
      - 'hotfix/**'

env:
  configuration: Release
  artifacts-dir: artifacts
  nugets-dir:    artifacts/nupkgs
  pdb-dir:       artifacts/pdb
  prerelease-tag: ${{ (github.event.inputs.publish_artifacts && (github.event.inputs.prerelease_tag[1] != null && format('-{0}', github.event.inputs.prerelease_tag) || '' ) || '-dev' ) }}

jobs:
  build:
    runs-on: windows-latest
    steps:
      - name: Info
        run: |
          echo 'input' ${{ github.event.inputs.prerelease_tag }}
          echo 'input[0]' ${{ github.event.inputs.prerelease_tag[0] == null }}
          echo 'input[1]' ${{ github.event.inputs.prerelease_tag[1] != null}}
          echo 'prerelease tag value' ${{ env.prerelease-tag }}

      -
        name: Checkout
        uses: actions/checkout@v4.1.1
        with:
          fetch-depth: 0

      -
        name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 8.0.x

      -
        name: Install GitVersion
        uses: gittools/actions/gitversion/setup@v1.1.1
        with:
          versionSpec: '5.x'
          preferLatestVersion: true

      -
        name: Use GitVersion
        id:   gitversion # step id used as reference for output values
        uses: gittools/actions/gitversion/execute@v1.1.1
        env:
          InfoVersion: ${{ format('{0}.{1}{2}', steps.gitversion.outputs.MajorMinorPatch, steps.gitversion.outputs.PreReleaseTag, env.prerelease-tag) }}

      # Build
      -
        name: Build
        run:  >
          dotnet build
          -c ${{env.configuration}}
          -p:AssemblyVersion=${{ steps.gitversion.outputs.AssemblySemVer }}
          -p:FileVersion=${{ steps.gitversion.outputs.AssemblySemFileVer }}
          -p:InformationalVersion=${{ steps.gitversion.outputs.InfoVersion }}

      # Run tests
      -
        name: Test
        run: dotnet test --no-build

      # Create and place nuget packages into env.nugets-dir directory
      - if: github.event.inputs.publish_artifacts == 'true'
        name: Pack
        run: dotnet pack --no-build -o:${{ env.nugets-dir }} -p:PackageVersion=${{ steps.gitversion.outputs.InfoVersion }}

      - if: github.event.inputs.publish_artifacts == 'true'
        name: Store Version
        uses: jsdaniell/create-json@v1.2.3
        with:
          name: version.json
          json: |
            {
            "assembly-version": "${{ steps.gitversion.outputs.AssemblySemVer }}",
            "assembly-file-version": "${{ steps.gitversion.outputs.AssemblySemFileVer }}",
            "nuget-version": "${{ steps.gitversion.outputs.InfoVersion }}"
            }
          dir:  ${{ env.artifacts-dir }}

      - if: github.event.inputs.publish_artifacts == 'true'
        name: Store PDB
        run: |
          robocopy src\Armature\bin\Release\netstandard2.1\ ${{ env.pdb-dir }} *.pdb
          if ($lastexitcode -lt 8) { $global:lastexitcode = 0 }

      - if: github.event.inputs.publish_artifacts == 'true'
        name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name:           Artifacts
          path:           ${{ env.artifacts-dir }}/
          retention-days: 3